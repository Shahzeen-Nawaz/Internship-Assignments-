Python Official Documentation on Lists: 

Key Points:

Lists in Python are versatile and commonly used data structures that store an ordered collection of items. Here are the key points from the Python Official Documentation on lists:

1. Creating Lists:
   - Lists are created by placing items inside square brackets [], separated by commas.
     fruits = ["apple", "banana", "cherry"]

2. Accessing Elements:
   - Elements can be accessed by indexing, starting from 0.
     print(fruits[0])  # Output: appe

3. Modifying Lists:
   - Lists are mutable, meaning elements can be changed.
     fruits[1] = "blueberry"
     print(fruits)  # Output: ['apple', 'blueberry', 'cherry']

4. List Methods:
   - Common methods include append(), insert(), remove(), and pop().
     fruits.append("orange")
     print(fruits)  # Output: ['apple', 'blueberry', 'cherry', 'orange']
     
     fruits.remove("blueberry")
     print(fruits)  # Output: ['apple', 'cherry', 'orange']
     
     fruits.insert(1, "kiwi")
     print(fruits)  # Output: ['apple', 'kiwi', 'cherry', 'orange']
     
     fruits.pop()
     print(fruits)  # Output: ['apple', 'kiwi', 'cherry']

5. Slicing Lists:
   - Slicing is used to access a range of elements.
     print(fruits[1:3])  # Output: ['kiwi', 'cherry']

6. List Comprehensions:
   - A concise way to create lists.
     squares = [x**2 for x in range(10)]
     print(squares)  # Output: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

7. Nested Lists:
   - Lists can contain other lists as elements.
     nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
     print(nested_list[1][2])  # Output: 6

8. Looping Through Lists:
   - Using loops to iterate through list elements.
     for fruit in fruits:
         print(fruit)
     # Output:
     # apple
     # kiwi
     # cherry
     
9. List Functions:
   - Useful built-in functions like len(), max(), min(), and sum().
     numbers = [1, 2, 3, 4, 5]
     print(len(numbers))  # Output: 5
     print(max(numbers))  # Output: 5
     print(min(numbers))  # Output: 1
     print(sum(numbers))  # Output: 15


Code Examples:

# Creating a list
fruits = ["apple", "banana", "cherry"]

# Accessing elements
print(fruits[0])  # Output: apple

# Modifying list
fruits[1] = "blueberry"
print(fruits)  # Output: ['apple', 'blueberry', 'cherry']

# List methods
fruits.append("orange")
print(fruits)  # Output: ['apple', 'blueberry', 'cherry', 'orange']

fruits.remove("blueberry")
print(fruits)  # Output: ['apple', 'cherry', 'orange']

fruits.insert(1, "kiwi")
print(fruits)  # Output: ['apple', 'kiwi', 'cherry', 'orange']

fruits.pop()
print(fruits)  # Output: ['apple', 'kiwi', 'cherry']

# Slicing lists
print(fruits[1:3])  # Output: ['kiwi', 'cherry']

# List comprehensions
squares = [x**2 for x in range(10)]
print(squares)  # Output: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# Nested lists
nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(nested_list[1][2])  # Output: 6

# Looping through lists
for fruit in fruits:
    print(fruit)
# Output:
# apple
# kiwi
# cherry

# List functions
numbers = [1, 2, 3, 4, 5]
print(len(numbers))  # Output: 5
print(max(numbers))  # Output: 5
print(min(numbers))  # Output: 1
print(sum(numbers))  # Output: 15

The Python Official Documentation provides a thorough understanding of lists, showcasing their flexibility and the various methods available to manipulate them effectively.



Python Official Documentation on Strings: 

Key Points:

Strings in Python are sequences of characters used to store text. Here are the key points from the Python Official Documentation on strings:

1. Creating Strings:
   - Strings can be created by enclosing characters in single quotes ', double quotes ", or triple quotes ''' or """ for multi-line strings.
     single_quote_str = 'Hello'
     double_quote_str = "World"
     multi_line_str = '''This is
     a multi-line
     string'''

2. String Indexing and Slicing:
   - Strings are indexed from 0. Negative indexing is also allowed.
     s = "Hello"
     print(s[0])  # Output: H
     print(s[-1])  # Output: o
     
   - Slicing strings to get substrings.
     print(s[1:4])  # Output: ell
     print(s[:3])   # Output: Hel
     print(s[2:])   # Output: llo
     ```

3. String Concatenation and Repetition:
   - Using + to concatenate and * to repeat strings.
     s1 = "Hello"
     s2 = "World"
     print(s1 + " " + s2)  # Output: Hello World
     print(s1 * 3)  # Output: HelloHelloHello

4. String Methods:
   - Common string methods include upper(), lower(), strip(), split(), replace(), and find().
     s = " Hello, World! "
     print(s.upper())  # Output:  HELLO, WORLD!
     print(s.lower())  # Output:  hello, world!
     print(s.strip())  # Output: Hello, World!
     print(s.split(","))  # Output: [' Hello', ' World! ']
     print(s.replace("World", "Python"))  # Output:  Hello, Python!
     print(s.find("World"))  # Output: 8

5. String Formatting:
   - Using f-strings (formatted string literals) for formatting.
     name = "Alice"
     age = 30
     print(f"My name is {name} and I am {age} years old.")  # Output: My name is Alice and I am 30 years old.
     
   - Using format() method.
     print("My name is {} and I am {} years old.".format(name, age))  # Output: My name is Alice and I am 30 years old.

6. Escape Characters:
   - Using escape characters to include special characters in strings.
     s = "He said, \"Hello, World!\""
     newline_str = "Hello\nWorld"
     tabbed_str = "Hello\tWorld"
     print(s)  # Output: He said, "Hello, World!"
     print(newline_str)  # Output: Hello
                         #         World
     print(tabbed_str)  # Output: Hello   World


Code Examples:

# Creating strings
single_quote_str = 'Hello'
double_quote_str = "World"
multi_line_str = '''This is
a multi-line
string'''

# String indexing and slicing
s = "Hello"
print(s[0])  # Output: H
print(s[-1])  # Output: o
print(s[1:4])  # Output: ell
print(s[:3])   # Output: Hel
print(s[2:])   # Output: llo

# String concatenation and repetition
s1 = "Hello"
s2 = "World"
print(s1 + " " + s2)  # Output: Hello World
print(s1 * 3)  # Output: HelloHelloHello

# String methods
s = " Hello, World! "
print(s.upper())  # Output:  HELLO, WORLD!
print(s.lower())  # Output:  hello, world!
print(s.strip())  # Output: Hello, World!
print(s.split(","))  # Output: [' Hello', ' World! ']
print(s.replace("World", "Python"))  # Output:  Hello, Python!
print(s.find("World"))  # Output: 8

# String formatting
name = "Alice"
age = 30
print(f"My name is {name} and I am {age} years old.")  # Output: My name is Alice and I am 30 years old.
print("My name is {} and I am {} years old.".format(name, age))  # Output: My name is Alice and I am 30 years old.

# Escape characters
s = "He said, \"Hello, World!\""
newline_str = "Hello\nWorld"
tabbed_str = "Hello\tWorld"
print(s)  # Output: He said, "Hello, World!"
print(newline_str)  # Output: Hello
                    #         World
print(tabbed_str)  # Output: Hello   World

The Python Official Documentation provides a thorough understanding of strings, showcasing their versatility and the various methods available to manipulate them effectively.



Python Official Documentation on Modules:

Key Points:

Modules in Python are files containing Python code, which can include functions, classes, and variables. They allow code to be organized and reused across different programs. Here are the key points from the Python Official Documentation on modules:

1. Creating a Module:
   - A module is simply a Python file (.py).
     # example_module.py
     def greet(name):
         return f"Hello, {name}!"

2. Importing a Module:
   - Use the import statement to include a module.
     import example_module
     print(example_module.greet("Alice"))  # Output: Hello, Alice!

3. Importing Specific Attributes:
   - Use from to import specific functions or variables.
     from example_module import greet
     print(greet("Bob"))  # Output: Hello, Bob!

4. Renaming a Module:
   - Use as to rename a module during import.
     import example_module as em
     print(em.greet("Charlie"))  # Output: Hello, Charlie!

5. Standard Library Modules:
   - Python includes many standard library modules, such as math, datetime, and os.
     import math
     print(math.sqrt(16))  # Output: 4.0

     import datetime
     now = datetime.datetime.now()
     print(now)

     import os
     print(os.getcwd())  # Output: current working directory

6. Locating Modules:
   - Python searches for modules in the directories listed in sys.path.
     import sys
     print(sys.path)

7. Compiled Python files:
   - Modules can be compiled into bytecode (.pyc files) to improve loading speed.
     # This happens automatically when a module is imported 

8. Package:
   - A package is a collection of modules in a directory with an __init__.py file.
     mypackage/
         __init__.py
         module1.py
         module2.py


Code Examples:

# Creating a module: example_module.py
def greet(name):
    return f"Hello, {name}!"

# Importing a module
import example_module
print(example_module.greet("Alice"))  # Output: Hello, Alice!

# Importing specific attributes
from example_module import greet
print(greet("Bob"))  # Output: Hello, Bob!

# Renaming a module
import example_module as em
print(em.greet("Charlie"))  # Output: Hello, Charlie!

# Standard library modules
import math
print(math.sqrt(16))  # Output: 4.0

import datetime
now = datetime.datetime.now()
print(now)

import os
print(os.getcwd())  # Output: current working directory

# Locating modules
import sys
print(sys.path)

The Python Official Documentation provides a comprehensive guide on using modules to organize and reuse code effectively, highlighting the simplicity and power of modular programming in Python.
